env = Environment();

Import("lilyUtilsAppend");
if lilyUtilsAppend == None:
    print "Lily Utils lib needed!";
    Exit(1);

env.Append(**lilyUtilsAppend);

env.Append(CXXFLAGS="-g -Wall");
env.Append(LDFLAGS="-g");

# If we're not on Windows, assume something POSIXy.
if(not(env["PLATFORM"] == "win32")):
    env.Append(LINKFLAGS="-pthread");

env.Program("lilyimgbuffer", "imgbuffer/imgbuffer.cpp");
env.Program("lilybuffergen", "buffergen/buffergen.cpp");
toolGlContextGen = env.Program("lilymkglcontextcode", "glcontextcode/mkglcontextcode.cpp");
env.Program("lilyheaderfixer", "headerfixer/headerfixer.cpp");
env.Program("lilytodoscan", [
        "todoscan/todoscan.cpp",
        "todoscan/orgmodestuff.cpp",
        "todoscan/commentblock.cpp"]);
env.Program("derp", "derpscript/derp.cpp");
toolArchiver = env.Program("lilyarchiver", "archiver/archiver.cpp");

# Poop file builder.
def archiverEmitter(source, target, env):
    return (target, [toolArchiver] + source);
archiverBuilder = Builder(
    action="${SOURCES[0]} -c $TARGET ${SOURCES[1::]}",
    emitter=archiverEmitter,
    suffix=".poop");

def glContextGenEmitter(source, target, env):
    return (target, [toolGlContextGen] + source);
glContextGenBuilder = Builder(
    action="${SOURCES[0]} ${SOURCES[1]} $TARGETS",
    emitter=glContextGenEmitter);

appendValues = {
    "BUILDERS":{
        "PoopFile":archiverBuilder,
        "LilyGLContext":glContextGenBuilder}
};


Return("appendValues");



