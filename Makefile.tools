COMMON_CXXFLAGS := \
	-Wall \
	--std=c++11
COMMON_LDFLAGS :=

# We'll fill this up with things to clean out later.
CLEANLIST :=
GENERATEDLIST :=

# Attempt to discover a native C++ compiler that we can use to build
# the tools we'll need to generate code for everything else.
NATIVECXX := $(shell which clang++ g++ c++ "$(CXX)" | head -n 1)

# Version of buffergen built for the native platform tools for some of
# the needed code generation.
NATIVEBUFFERGEN := ./buffergen_temp
NATIVETODOSCAN := ./todoscan_temp
.INTERMEDIATE : $(NATIVEBUFFERGEN) $(NATIVETODOSCAN)

# Flags for the target platform.
TARGET_CXXFLAGS := $(COMMON_CXXFLAGS)  \
	$(shell bash config.bsh --cxxflags --enable-threads --enable-sockets)
TARGET_LDFLAGS := $(COMMON_LDFLAGS) \
	$(shell bash config.bsh --libs --enable-threads --enable-sockets)
TARGET_EXT :=

# Flags for this (build) platform so we can build code generators.
NATIVE_CXXFLAGS := $(COMMON_CXXFLAGS) \
	$(shell CXX=$(NATIVECXX) bash config.bsh --cxxflags --enable-threads --enable-sockets)
NATIVE_LDFLAGS := $(COMMON_LDFLAGS) \
	$(shell CXX=$(NATIVECXX) bash config.bsh --libs --enable-threads --enable-sockets)
NATIVE_EXT :=

# Need to add Winsock stuff to Windows builds when using Mingw, and
# pthreads to non-Windows builds. Winsock linking will get handled by
# a #pragma comment for Windows builds when using Microsoft's
# compiler.
ifneq (,$(findstring mingw,$(NATIVECXX)))
	NATIVE_LDFLAGS := $(NATIVE_LDFLAGS) -static
	NATIVE_EXT := .exe
	NATIVEBUFFERGEN := $(NATIVEBUFFERGEN)$(NATIVE_EXT)
	NATIVETODOSCAN := $(NATIVETODOSCAN)$(NATIVE_EXT)
else
	NATIVE_LDFLAGS := $(NATIVE_LDFLAGS)
endif

ifneq (,$(findstring mingw,$(CXX)))
	TARGET_LDFLAGS := $(TARGET_LDFLAGS) -static
	TARGET_EXT := .exe
else
	TARGET_LDFLAGS := $(TARGET_LDFLAGS)
endif

all : \
	buffergen$(TARGET_EXT) lilyarchiver$(TARGET_EXT) \
	headerfixer$(TARGET_EXT) imgbuffer$(TARGET_EXT) \
	todoscan$(TARGET_EXT) lilylibtests$(TARGET_EXT)


# ----------------------------------------------------------------------
# buffergen

# buffergen relies on a primitive version of buffergen to generate the
# internal --help text buffer!
$(NATIVEBUFFERGEN) : tools/buffergen/buffergen.cpp
	$(NATIVECXX) $(NATIVE_CXXFLAGS) $(NATIVE_LDFLAGS) \
		-DNO_HELP_ALLOWED=1 \
		tools/buffergen/buffergen.cpp \
		-o $@

# We'll re-use this macro a bunch for generating the --help usage text
# for other tools. Apparently this all breaks if you have actual
# indentation because Make sucks.
ifeq ("$(REGEN_USAGE_HEADERS)","1")
define generateUsageTextFromREADME
tools/$1/usagetext.h : $(NATIVEBUFFERGEN) tools/$1/README.txt;
	$(NATIVEBUFFERGEN) \
	tools/$1/README.txt \
	usageText > tools/$1/usagetext.h;
endef
else
define generateUsageTextFromREADME
tools/$1/usagetext.h : tools/$1/README.txt;
	echo "Skipping usage text regeneration.";
endef
endif

$(call generateUsageTextFromREADME,buffergen)

buffergen$(TARGET_EXT) : tools/buffergen/buffergen.cpp tools/buffergen/usagetext.h
	$(CXX) $(TARGET_CXXFLAGS) $(TARGET_LDFLAGS) \
		tools/buffergen/buffergen.cpp \
		-o $@

CLEANLIST := $(CLEANLIST) $(NATIVEBUFFERGEN) buffergen$(TARGET_EXT)
GENERATEDLIST := $(GENERATEDLIST) tools/buffergen/usagetext.h

# ----------------------------------------------------------------------
# lilyarchiver

$(call generateUsageTextFromREADME,archiver)

lilyarchiver$(TARGET_EXT) : \
	tools/archiver/archiver.cpp \
	tools/archiver/usagetext.h

	$(CXX) $(TARGET_CXXFLAGS) $(TARGET_LDFLAGS) \
		tools/archiver/archiver.cpp \
		-o $@

CLEANLIST := $(CLEANLIST) lilyarchiver$(TARGET_EXT)
GENERATEDLIST := $(GENERATEDLIST) tools/archiver/usagetext.h

# ----------------------------------------------------------------------
# headerfixer

tools/headerfixer/mainheader.h : $(NATIVEBUFFERGEN) tools/headerfixer/mainheader.txt
	$(NATIVEBUFFERGEN) tools/headerfixer/mainheader.txt mainHeader > $@

$(call generateUsageTextFromREADME,headerfixer)

headerfixer$(TARGET_EXT) : \
	tools/headerfixer/headerfixer.cpp \
	tools/headerfixer/mainheader.h \
	tools/headerfixer/usagetext.h

	$(CXX) $(TARGET_CXXFLAGS) $(TARGET_LDFLAGS) \
		tools/headerfixer/headerfixer.cpp \
		-o $@

CLEANLIST := $(CLEANLIST) headerfixer$(TARGET_EXT)
GENERATEDLIST := $(GENERATEDLIST) tools/headerfixer/usagetext.h

# ----------------------------------------------------------------------
# imgbuffer

$(call generateUsageTextFromREADME,imgbuffer)

imgbuffer$(TARGET_EXT) : \
	tools/imgbuffer/imgbuffer.cpp \
	tools/imgbuffer/usagetext.h

	$(CXX) $(TARGET_CXXFLAGS) $(TARGET_LDFLAGS) \
		tools/imgbuffer/imgbuffer.cpp \
		-o $@

CLEANLIST := $(CLEANLIST) imgbuffer$(TARGET_EXT)
GENERATEDLIST := $(GENERATEDLIST) tools/imgbuffer/usagetext.h

# ----------------------------------------------------------------------
# todoscan

TODOSCAN_SOURCES := \
	tools/todoscan/todoscan.cpp \
	tools/todoscan/orgmodestuff.cpp \
	tools/todoscan/commentblock.cpp

$(NATIVETODOSCAN) : \
	tools/todoscan/todoscan.cpp \
	tools/todoscan/usagetext.h

	$(NATIVECXX) $(NATIVE_CXXFLAGS) $(NATIVE_LDFLAGS) \
		$(TODOSCAN_SOURCES) \
		-o $@

$(call generateUsageTextFromREADME,todoscan)

todoscan$(TARGET_EXT) : \
	tools/todoscan/todoscan.cpp \
	tools/todoscan/usagetext.h

	$(CXX) $(TARGET_CXXFLAGS) $(TARGET_LDFLAGS) \
		$(TODOSCAN_SOURCES) \
		-o $@


CLEANLIST := $(CLEANLIST) todoscan$(TARGET_EXT)
GENERATEDLIST := $(GENERATEDLIST) tools/todoscan/usagetext.h

# ----------------------------------------------------------------------
# lilylibtests

$(call generateUsageTextFromREADME,lilylibtests)

lilylibtests$(TARGET_EXT) : \
	tools/lilylibtests/lilylibtests.cpp \
	tools/lilylibtests/usagetext.h

	$(CXX) tools/lilylibtests/lilylibtests.cpp \
		$(TARGET_CXXFLAGS) $(TARGET_LDFLAGS) \
		-o $@

CLEANLIST := $(CLEANLIST) lilylibtests$(TARGET_EXT)
GENERATEDLIST := $(GENERATEDLIST) tools/lilylibtests/usagetext.h

# ----------------------------------------------------------------------

clean :
	- rm $(CLEANLIST)

extraclean : clean
	- rm $(GENERATEDLIST)

# ----------------------------------------------------------------------

# We probably don't actually want this here.
ALLSOURCESLIST := \
	$(shell find tools utils -iname "*.h" -and -not -iname "usagetext.h") \
	$(shell find tools utils -iname "*.cpp")
TODO.org : $(NATIVETODOSCAN) $(ALLSOURCESLIST)
	$(NATIVETODOSCAN) $(ALLSOURCESLIST) $@
